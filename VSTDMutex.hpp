/* ***************************************************************************
 * @file		VSTDMutex.hpp
 * @brief		相互排他管理用 Class
 * @author		Sebastian
 * @date		2009/7/16
 * @version	1.0
 * @par 更新履歴：
 * - 2009/07/16	Sebastian 新規作成
 * ***************************************************************************/
#ifndef VSTDMUTEX_HPP_
#define VSTDMUTEX_HPP_
/* ***************************************************************************
 * including library
 * ***************************************************************************/ 
#include <pthread.h>
#include <stdio.h>
#include <memory.h>
#include <stdlib.h>
#include <errno.h>
namespace VSTD
{
	/**
	 * @brief		Mutex
	 * 				相互排他管理用 Class
	 * @author	Sebastian
	 * @date		2009/7/16
	 */
	class Mutex
	{
		private:
			/* ***************************************************************
			 * プライベートメンバ変数
			 * ***************************************************************/
			/** @brief ミューテックス属性 */
			pthread_mutexattr_t 	mutex_attr;
			/** @brief ミューテックスのID */
			pthread_mutex_t		mutex_id;
			/** @brief 現在、ミューテックスを取得中のスレッドIDを保持します */
			pthread_t				owner_id;
		public:
			/* ***************************************************************
			 * コンストラクタ/デストラクタ
			 * ***************************************************************/
			Mutex(void);
			virtual ~Mutex(void);
			/* ***************************************************************
			 * パブリックメンバ変数
			 * ***************************************************************/
			bool					created;
			/* ***************************************************************
			 * パブリックメソッド
			 * ***************************************************************/
			void					lock();
			void					unlock();
	};
}
#endif
